// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// whichLowerEQThanX
int whichLowerEQThanX(NumericVector x, double y);
RcppExport SEXP _HistDAWass_whichLowerEQThanX(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(whichLowerEQThanX(x, y));
    return rcpp_result_gen;
END_RCPP
}
// COMP_Q_VECT
NumericVector COMP_Q_VECT(NumericVector x, NumericVector p, NumericVector vp);
RcppExport SEXP _HistDAWass_COMP_Q_VECT(SEXP xSEXP, SEXP pSEXP, SEXP vpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vp(vpSEXP);
    rcpp_result_gen = Rcpp::wrap(COMP_Q_VECT(x, p, vp));
    return rcpp_result_gen;
END_RCPP
}
// concatenate_and_sort
NumericVector concatenate_and_sort(NumericVector a, NumericVector b);
RcppExport SEXP _HistDAWass_concatenate_and_sort(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(concatenate_and_sort(a, b));
    return rcpp_result_gen;
END_RCPP
}
// REGISTER2
Rcpp::List REGISTER2(S4 a, S4 b);
RcppExport SEXP _HistDAWass_REGISTER2(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type a(aSEXP);
    Rcpp::traits::input_parameter< S4 >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(REGISTER2(a, b));
    return rcpp_result_gen;
END_RCPP
}
// PREPARE_A_VEC_MAT
List PREPARE_A_VEC_MAT(S4 MAT);
RcppExport SEXP _HistDAWass_PREPARE_A_VEC_MAT(SEXP MATSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type MAT(MATSEXP);
    rcpp_result_gen = Rcpp::wrap(PREPARE_A_VEC_MAT(MAT));
    return rcpp_result_gen;
END_RCPP
}
// MEDIA_V
S4 MEDIA_V(S4 MAT, NumericVector wei);
RcppExport SEXP _HistDAWass_MEDIA_V(SEXP MATSEXP, SEXP weiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type MAT(MATSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type wei(weiSEXP);
    rcpp_result_gen = Rcpp::wrap(MEDIA_V(MAT, wei));
    return rcpp_result_gen;
END_RCPP
}
// SSQ_RCPP
NumericMatrix SSQ_RCPP(S4 MAT, NumericVector wei);
RcppExport SEXP _HistDAWass_SSQ_RCPP(SEXP MATSEXP, SEXP weiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type MAT(MATSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type wei(weiSEXP);
    rcpp_result_gen = Rcpp::wrap(SSQ_RCPP(MAT, wei));
    return rcpp_result_gen;
END_RCPP
}
// COV_RCPP
NumericMatrix COV_RCPP(S4 MAT, NumericVector wei);
RcppExport SEXP _HistDAWass_COV_RCPP(SEXP MATSEXP, SEXP weiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type MAT(MATSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type wei(weiSEXP);
    rcpp_result_gen = Rcpp::wrap(COV_RCPP(MAT, wei));
    return rcpp_result_gen;
END_RCPP
}
// CORR_RCPP
NumericMatrix CORR_RCPP(S4 MAT, NumericVector wei);
RcppExport SEXP _HistDAWass_CORR_RCPP(SEXP MATSEXP, SEXP weiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type MAT(MATSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type wei(weiSEXP);
    rcpp_result_gen = Rcpp::wrap(CORR_RCPP(MAT, wei));
    return rcpp_result_gen;
END_RCPP
}
// M_STD_H
NumericVector M_STD_H(S4 o);
RcppExport SEXP _HistDAWass_M_STD_H(SEXP oSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type o(oSEXP);
    rcpp_result_gen = Rcpp::wrap(M_STD_H(o));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_HistDAWass_whichLowerEQThanX", (DL_FUNC) &_HistDAWass_whichLowerEQThanX, 2},
    {"_HistDAWass_COMP_Q_VECT", (DL_FUNC) &_HistDAWass_COMP_Q_VECT, 3},
    {"_HistDAWass_concatenate_and_sort", (DL_FUNC) &_HistDAWass_concatenate_and_sort, 2},
    {"_HistDAWass_REGISTER2", (DL_FUNC) &_HistDAWass_REGISTER2, 2},
    {"_HistDAWass_PREPARE_A_VEC_MAT", (DL_FUNC) &_HistDAWass_PREPARE_A_VEC_MAT, 1},
    {"_HistDAWass_MEDIA_V", (DL_FUNC) &_HistDAWass_MEDIA_V, 2},
    {"_HistDAWass_SSQ_RCPP", (DL_FUNC) &_HistDAWass_SSQ_RCPP, 2},
    {"_HistDAWass_COV_RCPP", (DL_FUNC) &_HistDAWass_COV_RCPP, 2},
    {"_HistDAWass_CORR_RCPP", (DL_FUNC) &_HistDAWass_CORR_RCPP, 2},
    {"_HistDAWass_M_STD_H", (DL_FUNC) &_HistDAWass_M_STD_H, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_HistDAWass(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
