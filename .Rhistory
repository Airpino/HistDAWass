library(HistDAWass)
set.seed(1234); results=WH_2d_Adaptive_Kohonen_maps(x = China_Seas[,5:8],
net=list(xdim=2,ydim=3,topo=c('rectangular')),
repetitions = 5,schema = 1,simplify = TRUE,
qua = 10,standardize = TRUE)
set.seed(1234); results=WH_2d_Adaptive_Kohonen_maps(x = China_Seas[,5:8],
net=list(xdim=4,ydim=3,topo=c('rectangular')),
repetitions = 5,schema = 1,simplify = TRUE,
qua = 10,standardize = FALSE)
set.seed(1234); results=WH_2d_Adaptive_Kohonen_maps(x = China_Seas[,5:8],
net=list(xdim=4,ydim=3,topo=c('rectangular')),
repetitions = 5,schema = 2,simplify = TRUE,
qua = 10,standardize = FALSE)
set.seed(1234); results=WH_2d_Adaptive_Kohonen_maps(x = China_Seas[,5:8],
net=list(xdim=4,ydim=3,topo=c('rectangular')),
repetitions = 5,schema = 3,simplify = TRUE,
qua = 10,standardize = FALSE)
set.seed(1234); results=WH_2d_Adaptive_Kohonen_maps(x = China_Seas[,5:8],
net=list(xdim=4,ydim=3,topo=c('rectangular')),
repetitions = 5,schema = 4,simplify = TRUE,
qua = 10,standardize = FALSE)
set.seed(1234); results=WH_2d_Adaptive_Kohonen_maps(x = China_Seas[,5:8],
net=list(xdim=4,ydim=3,topo=c('rectangular')),
repetitions = 5,schema = 5,simplify = TRUE,
qua = 10,standardize = FALSE)
set.seed(1234); results=WH_2d_Adaptive_Kohonen_maps(x = China_Seas[,5:8],
net=list(xdim=4,ydim=3,topo=c('rectangular')),
repetitions = 5,schema = 6,simplify = TRUE,
qua = 10,standardize = FALSE)
set.seed(1234); results=WH_2d_Adaptive_Kohonen_maps(x = China_Seas[,5:8],
net=list(xdim=4,ydim=3,topo=c('rectangular')),
repetitions = 5,schema = 6,weight.sys = "SUM",simplify = TRUE,
qua = 10,standardize = FALSE)
plot(results$solution$proto,type="DENS")
set.seed(1234); results=WH_2d_Adaptive_Kohonen_maps(x = China_Seas[,5:8],
net=list(xdim=4,ydim=3,topo=c('rectangular')),
repetitions = 5,schema = 6,weight.sys = "SUM",simplify = TRUE,
qua = 10,standardize = FALSE,verbose=TRUE)
results$TMAX
results$Tmin
results$dmax
log(0.99)
log(0.01)
install.packages("ggridges")
library(HistDAWass)
library(HistDAWass)
library(HistDAWass)
tools::package_native_routine_registration_skeleton(".")
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
library(HistDAWass)
library(HistDAWass)
source('~/.active-rstudio-document')
init_cpp(HistDAWass)
init_cpp("HistDAWass")
library(HistDAWass)
library(HistDAWass)
library(HistDAWass)
library(HistDAWass)
library(HistDAWass)
res=WH_2d_Kohonen_maps(BLOOD,net=list(xdim=2,ydim=3,topo=c('rectangular')),verbose=TRUE)
res=WH_2d_Kohonen_maps(BLOOD,net=list(xdim=2,ydim=3,topo=c('rectangular')),verbose=TRUE)
debugSource('C:/Users/Antonio/Desktop/HISTO_R_PACK/HistDAWass/R/Kohonen_maps.R')
res=WH_2d_Kohonen_maps(BLOOD,net=list(xdim=2,ydim=3,topo=c('rectangular')),verbose=TRUE)
library(HistDAWass)
res=WH_2d_Kohonen_maps(BLOOD,net=list(xdim=2,ydim=3,topo=c('rectangular')),verbose=TRUE)
library(HistDAWass)
res=WH_2d_Kohonen_maps(BLOOD,net=list(xdim=2,ydim=3,topo=c('rectangular')),verbose=TRUE)
library(HistDAWass)
res=WH_2d_Kohonen_maps(BLOOD,net=list(xdim=2,ydim=3,topo=c('rectangular')),verbose=TRUE)
res=WH_2d_Kohonen_maps(BLOOD,net=list(xdim=2,ydim=3,topo=c('rectangular')),verbose=TRUE,TMAX = -1,Tmin = -1)
res$solution$IDX
plot(BLOOD)
res=WH_2d_Kohonen_maps(BLOOD,net=list(xdim=2,ydim=3,topo=c('hexagonal')),verbose=TRUE,TMAX = -1,Tmin = -1)
res$solution$IDX
plot(BLOOD)
res=WH_2d_Kohonen_maps(BLOOD,net=list(xdim=2,ydim=2,topo=c('hexagonal')),verbose=TRUE,TMAX = -1,Tmin = -1)
res$solution$IDX
as.matrix(res$solution$IDX)
res=WH_2d_Adaptive_Kohonen_maps(BLOOD,net=list(xdim=2,ydim=2,topo=c('hexagonal')),verbose=TRUE,TMAX = -1,Tmin = -1,schema = 1)
as.matrix(res$solution$IDX)
res=WH_2d_Adaptive_Kohonen_maps(BLOOD,net=list(xdim=2,ydim=2,topo=c('hexagonal')),verbose=TRUE,TMAX = -1,Tmin = -1,schema = 2)
as.matrix(res$solution$IDX)
res=WH_2d_Adaptive_Kohonen_maps(BLOOD,net=list(xdim=2,ydim=2,topo=c('hexagonal')),verbose=TRUE,TMAX = -1,Tmin = -1,schema = 3)
as.matrix(res$solution$IDX)
res=WH_2d_Adaptive_Kohonen_maps(BLOOD,net=list(xdim=2,ydim=2,topo=c('hexagonal')),verbose=TRUE,TMAX = -1,Tmin = -1,schema = 4)
res=WH_2d_Adaptive_Kohonen_maps(BLOOD,net=list(xdim=2,ydim=2,topo=c('hexagonal')),verbose=TRUE,TMAX = -1,Tmin = -1,schema = 5)
as.matrix(res$solution$IDX)
res=WH_2d_Adaptive_Kohonen_maps(BLOOD,net=list(xdim=2,ydim=2,topo=c('hexagonal')),verbose=TRUE,TMAX = -1,Tmin = -1,schema = 6)
as.matrix(res$solution$IDX)
res=WH_2d_Adaptive_Kohonen_maps(BLOOD,net=list(xdim=2,ydim=2,topo=c('hexagonal')),verbose=TRUE,TMAX = -1,Tmin = -1,schema = 1)
res=WH_2d_Adaptive_Kohonen_maps(BLOOD,net=list(xdim=2,ydim=2,topo=c('rectangular')),verbose=TRUE,TMAX = -1,Tmin = -1,schema = 1)
as.matrix(res$solution$IDX)
res=WH_2d_Adaptive_Kohonen_maps(BLOOD,net=list(xdim=2,ydim=2,topo=c('rectangular')),verbose=TRUE,TMAX = -1,Tmin = -1,schema = 2)
as.matrix(res$solution$IDX)
res=WH_2d_Adaptive_Kohonen_maps(BLOOD,net=list(xdim=2,ydim=2,topo=c('rectangular')),verbose=TRUE,TMAX = -1,Tmin = -1,schema = 3)
as.matrix(res$solution$IDX)
res=WH_2d_Adaptive_Kohonen_maps(BLOOD,net=list(xdim=2,ydim=2,topo=c('rectangular')),verbose=TRUE,TMAX = -1,Tmin = -1,schema = 4)
res=WH_2d_Adaptive_Kohonen_maps(BLOOD,net=list(xdim=2,ydim=2,topo=c('rectangular')),verbose=TRUE,TMAX = -1,Tmin = -1,schema = 5)
res=WH_2d_Adaptive_Kohonen_maps(BLOOD,net=list(xdim=2,ydim=2,topo=c('rectangular')),verbose=TRUE,TMAX = -1,Tmin = -1,schema = 6)
res$TMAX
res$Tmin
res=WH_2d_Adaptive_Kohonen_maps(BLOOD,net=list(xdim=2,ydim=2,topo=c('rectangular')),verbose=TRUE,TMAX = -1,Tmin = -1,schema = 6,niter = 50)
res=WH_2d_Adaptive_Kohonen_maps(BLOOD,net=list(xdim=2,ydim=2,topo=c('rectangular')),verbose=TRUE,TMAX = -1,Tmin = -1,schema = 1,niter = 50)
as.matrix(res$solution$IDX)
res=WH_2d_Kohonen_maps(BLOOD,net=list(xdim=2,ydim=2,topo=c('rectangular')),verbose=TRUE,TMAX = -1,Tmin = -1,niter = 50)
as.matrix(res$solution$IDX)
res=WH_2d_Kohonen_maps(BLOOD,net=list(xdim=2,ydim=2,topo=c('rectangular')),verbose=TRUE,TMAX = -1,Tmin = -1,niter = 50,standardize = TRUE)
as.matrix(res$solution$IDX)
res=WH_2d_Kohonen_maps(BLOOD,net=list(xdim=3,ydim=2,topo=c('hexagonal')),verbose=TRUE,TMAX = -1,Tmin = -1,niter = 50,standardize = TRUE)
res=WH_2d_Kohonen_maps(BLOOD,net=list(xdim=3,ydim=2,topo=c('hexagonal')),verbose=TRUE,TMAX = -1,Tmin = -1,niter = 30,standardize = TRUE)
res=WH_2d_Kohonen_maps(BLOOD,net=list(xdim=3,ydim=2,topo=c('hexagonal')),verbose=TRUE,TMAX = -1,Tmin = -1,niter = 30,standardize = TRUE)
res=WH_2d_Kohonen_maps(BLOOD,net=list(xdim=2,ydim=2,topo=c('hexagonal')),verbose=TRUE,TMAX = -1,Tmin = -1,niter = 30,standardize = TRUE)
res=WH_2d_Kohonen_maps(BLOOD,net=list(xdim=2,ydim=2,topo=c('hexagonal')),verbose=TRUE,TMAX = -1,Tmin = -1,niter = 30)
as.matrix(res$solution$IDX)
pippo=matrix(runif(100),3,4)
pippo=matrix(runif(100),20,5)
quantile(pippo,0)
quantile(pippo,1)
min(pippo)
max(pippo)
quantile(pippo,2/3)
library(HistDAWass)
BLOOD[1,1:3]
BLOOD[1,1:3]@M
BLOOD[1:3,1]@M
colnames(BLOOD[1:3,1]@M)
rownames(BLOOD[1:3,1]@M)
row.names(BLOOD[1:3,1]@M)
library(HistDAWass)
BLOOD[1,1:3]
BLOOD[1:3,1]
BLOOD[1:3,2]
library(HistDAWass)
BLOOD[1:3,2]
BLOOD[1:3,2]
BLOOD[1,2]
source('C:/Users/Antonio/Desktop/HISTO_R_PACK/HistDAWass/R/Met_MatH.R')
BLOOD[1,2]
length(i)
source('C:/Users/Antonio/Desktop/HISTO_R_PACK/HistDAWass/R/Met_MatH.R')
BLOOD[1,2]
BLOOD[1,1:2]
BLOOD[1,]
BLOOD[,1]
library(HistDAWass)
library("HistDAWass", lib.loc="~/R/win-library/3.4")
library(HistDAWass)
library(HistDAWass)
library(HistDAWass)
library(HistDAWass)
o1=BLOOD@M[1,1][[1]]
o2=BLOOD@M[1,2][[1]]
WassSqDistH(o1,o2)
library(HistDAWass)
o1=BLOOD@M[1,1][[1]]
o2=BLOOD@M[1,2][[1]]
WassSqDistH(o1,o2)
WassSqDistH(o1,o2,details=TRUE)
register(o1,o2)
pippo=register(o1,o2)
WassSqDistH(pippo[[1]],pippo[[2]])
WassSqDistH(o1,o2,details=TRUE)
microbenchmark(WassSqDistH(o1,o2,details=TRUE))
library(microbenchmark)
microbenchmark(WassSqDistH(o1,o2,details=TRUE))
microbenchmark(WassSqDistH(o1,o2,details=TRUE))
microbenchmark(WassSqDistH(o1,o2,details=TRUE))
microbenchmark(WassSqDistH(o1,o2,details=TRUE))
microbenchmark(WassSqDistH(o1,o2))
microbenchmark(WassSqDistH(o1,o2))
library(HistDAWass)
results=WH_2d_Kohonen_maps(x = BLOOD,k = 2,
net=list(xdim=2,ydim=3,topo=c('rectangular')),
repetitions = 2,simplify = TRUE,
qua = 10,standardize = TRUE)
library(HistDAWass)
results=WH_2d_Kohonen_maps(x = BLOOD,k = 2,
+ net=list(xdim=2,ydim=3,topo=c('rectangular')),
+ repetitions = 2,simplify = TRUE,
+ qua = 10,standardize = TRUE)
results=WH_2d_Kohonen_maps(x = BLOOD,k = 2,
net=list(xdim=2,ydim=3,topo=c('rectangular')),
repetitions = 2,simplify = TRUE,
qua = 10,standardize = TRUE)
library(HistDAWass)
results=WH_2d_Kohonen_maps(x = BLOOD,
net=list(xdim=2,ydim=3,topo=c('rectangular')),
repetitions = 2,simplify = TRUE,
qua = 10,standardize = TRUE)
results=WH_2d_Kohonen_maps(x = BLOOD,
net=list(xdim=2,ydim=3,topo=c('rectangular')),
repetitions = 10,simplify = TRUE,
qua = 10,standardize = TRUE)
results=WH_2d_Kohonen_maps(x = BLOOD,
net=list(xdim=2,ydim=3,topo=c('rectangular')),
repetitions = 10,simplify = TRUE,
qua = 10,standardize = TRUE)
results=WH_2d_Kohonen_maps(x = BLOOD,
net=list(xdim=2,ydim=3,topo=c('rectangular')),
repetitions = 10,simplify = TRUE,
qua = 10,standardize = TRUE)
results=WH_2d_Kohonen_maps(x = BLOOD,
net=list(xdim=2,ydim=3,topo=c('rectangular')),
repetitions = 10,simplify = TRUE,
qua = 10,standardize = TRUE)
results=WH_2d_Kohonen_maps(x = BLOOD,
net=list(xdim=2,ydim=3,topo=c('rectangular')),
repetitions = 10,simplify = TRUE,
qua = 10,standardize = TRUE)
results=WH_2d_Kohonen_maps(x = BLOOD,
net=list(xdim=2,ydim=3,topo=c('rectangular')),
repetitions = 100,simplify = TRUE,
qua = 10,standardize = TRUE)
library(HistDAWass)
results=WH_2d_Kohonen_maps(x = BLOOD,
net=list(xdim=2,ydim=3,topo=c('hexagonal')),
repetitions = 100,simplify = TRUE,
qua = 10,standardize = TRUE)
library(HistDAWass)
library(HistDAWass)
library(HistDAWass)
library(HistDAWass)
WH_kmeans(BLOOD,k=2)
Rcpp::sourceCpp('src/Utility_fun.cpp')
library(HistDAWass)
WH_kmeans(BLOOD,k=2)
WH_kmeans(BLOOD[,1],k=2)
WH_hclust(BLOOD)
WH_hclust(BLOOD)
WH_hclust(BLOOD[,1])
install.packages("FactoMineR")
install.packages("tidyr")
install.packages("ggridges")
install.packages("histogram")
install.packages("RcppArmadillo")
library(HistDAWass)
plot(BLOOD)
plot(BLOOD, type="DENS")
install.packages("robCompositions")
plot(BLOOD@M[1,1][[1]])
library(HistDAWass)
plot(BLOOD@M[1,1][[1]])
plot(BLOOD@M[1,1][[1]],type="HBOXPLOT")
plot(BLOOD@M[1,1][[1]],type="BOXPLOT")
plot(BLOOD@M[1,1][[1]],type="VBOXPLOT")
library(HistDAWass)
plot(BLOOD@M[1,1][[1]],type="VBOXPLOT")
plot(BLOOD@M[1,1][[1]],type="HBOXPLOT")
plot(BLOOD@M[1,1][[1]])
plot(BLOOD@M[1,1][[1]],type="HBOXPLOT")
plot(BLOOD@M[1,1][[1]])
plot(BLOOD)
library(HistDAWass)
plot(BLOOD@M[1,1][[1]],type="HBOXPLOT")
plot(BLOOD@M[1,1][[1]],type="VBOXPLOT")
source('C:/Users/AntonioYOGA/Desktop/Desk DELL/HISTO_R_PACK/HistDAWass/R/Plotting_with_ggplot.R')
plot(BLOOD@M[1,1][[1]],type="VBOXPLOT")
library(HistDAWass)
plot(BLOOD@M[1,1][[1]],type="VBOXPLOT")
plot(BLOOD@M[1,1][[1]],type="HBOXPLOT")
install.packages("roxygen2")
mov.expo.smooth=HTS.exponential.smoothing(HTS=RetHTS, alpha=0.8)
library(HistDAWass)
mov.expo.smooth=HTS.exponential.smoothing(HTS=RetHTS, alpha=0.8)
plot(mov.expo.smooth$SmoothedHTS)
debugSource('C:/Users/AntonioYOGA/Desktop/Desk DELL/HISTO_R_PACK/HistDAWass/R/H_time_series.R')
mov.expo.smooth=HTS.exponential.smoothing(HTS=RetHTS, alpha=0.8)
s@x
diff(s@x)
min(diff(s@x))
HTS@data[[i]]
library(HistDAWass)
library(HistDAWass)
library(HistDAWass)
warnings()
install.packages("devtools")
library(HistDAWass)
library(HistDAWass)
install.packages("testthat")
library(HistDAWass)
library(HistDAWass)
tmp=BLOOD@M[1,1][[1]]
is.na(tmp)
is.na(tmp$x)
is.na(tmp@x)
a=distributionH()
a
a@x
length(a@x)
git config --global user.email "antonio.irpino@gmail.com"
library(HistDAWass)
Rcpp::sourceCpp('src/Utility_fun.cpp')
library(HistDAWass)
library(HistDAWass)
library(HistDAWass)
install.packages("rhub")
library(rhub)
validate_email()
check()
library(HistDAWass)
library(HistDAWass)
library(rhub)
validate_email()
check()
check()
cran_prep <- check_for_cran()
View(cran_prep)
results=WH_adaptive.kmeans(x = BLOOD,k = 2, rep = 10,simplify =
TRUE,qua = 10,
standardize = TRUE)
library(HistDAWass)
results=WH_adaptive.kmeans(x = BLOOD,k = 2, rep = 10,simplify =
TRUE,qua = 10,
standardize = TRUE)
results
install.packages("knitr")
install.packages("FactoMineR")
install.packages("roxygen2")
install.packages("rhub")
library(rhub)
library(rhub)
check(valgrind = TRUE)
check_for_cran(valgrind = TRUE)
library(HistDAWass)
library(HistDAWass)
results=WH_adaptive.kmeans(x = BLOOD,k = 2, rep = 10,simplify =TRUE, qua=10,standardize=TRUE)
detach("package:HistDAWass", unload = TRUE)
results=WH_adaptive.kmeans(x = BLOOD,k = 2, rep = 10,simplify =TRUE, qua=10,standardize=TRUE)
remove.packages("HistDAWass", lib="~/R/win-library/4.0")
library(HistDAWass)
results=WH_adaptive.kmeans(x = BLOOD,k = 2, rep = 10,simplify =TRUE, qua=10,standardize=TRUE)
library(rhub)
check_with_valgrind()
install.packages("EdSurvey")
library(EdSurvey)
remove.packages("EdSurvey", lib="~/R/win-library/4.0")
install.packages("intsvy")
library(HistDAWass)
debugSource('C:/Users/AntonioYOGA/Desktop/Desk DELL/HISTO_R_PACK/HistDAWass/R/Coclustering.R')
debugSource('C:/Users/AntonioYOGA/Desktop/Desk DELL/HISTO_R_PACK/HistDAWass/R/Coclustering.R')
Rcpp::sourceCpp('src/Utility_fun.cpp')
debugSource('C:/Users/AntonioYOGA/Desktop/Desk DELL/HISTO_R_PACK/HistDAWass/R/coclu_try.R')
debugSource('C:/Users/AntonioYOGA/Desktop/Desk DELL/HISTO_R_PACK/HistDAWass/R/coclu_try.R')
debugSource('C:/Users/AntonioYOGA/Desktop/Desk DELL/HISTO_R_PACK/HistDAWass/R/coclu_try.R')
debugSource('C:/Users/AntonioYOGA/Desktop/Desk DELL/HISTO_R_PACK/HistDAWass/R/coclu_try.R')
source('C:/Users/AntonioYOGA/Desktop/Desk DELL/HISTO_R_PACK/HistDAWass/R/Utility.R')
debugSource('C:/Users/AntonioYOGA/Desktop/Desk DELL/HISTO_R_PACK/HistDAWass/R/coclu_try.R')
proto
plot(proto)
debugSource('C:/Users/AntonioYOGA/Desktop/Desk DELL/HISTO_R_PACK/HistDAWass/R/coclu_try.R')
View(proto)
IDXC
proto[,1:5]
View(tmp)
tmp[["wm"]]
sum(tmp$dist)
OldCrit=GenCrit
debugSource('C:/Users/AntonioYOGA/Desktop/Desk DELL/HISTO_R_PACK/HistDAWass/R/coclu_try.R')
apply(tmp$dist,2,which.min)
apply(tmp$dist,1,which.min)
rbind(apply(tmp$dist,1,which.min),IDXR)
dim(proto@M)
debugSource('C:/Users/AntonioYOGA/Desktop/Desk DELL/HISTO_R_PACK/HistDAWass/R/coclu_try.R')
head(MM[[1]])
pippo=MM[[2:4]]
pippo=MM[[c(2:4)]]
debugSource('C:/Users/AntonioYOGA/Desktop/Desk DELL/HISTO_R_PACK/HistDAWass/R/coclu_try.R')
MM[2:4]
pippo=MM[2:4]
View(pippo)
pippo2=MM[c(2,4)]
View(pippo2)
View(pippo)
View(pippo2)
Rcpp::sourceCpp('src/Utility_fun.cpp')
Rcpp::sourceCpp('src/Utility_fun.cpp')
debugSource('C:/Users/AntonioYOGA/Desktop/Desk DELL/HISTO_R_PACK/HistDAWass/R/Coclustering.R')
debugSource('C:/Users/AntonioYOGA/Desktop/Desk DELL/HISTO_R_PACK/HistDAWass/R/coclu_try.R')
source('C:/Users/AntonioYOGA/Desktop/Desk DELL/HISTO_R_PACK/HistDAWass/R/coclu_try.R')
debugSource('C:/Users/AntonioYOGA/Desktop/Desk DELL/HISTO_R_PACK/HistDAWass/R/coclu_try.R')
length(MM[selC])
pippo=MM[selC][,c(selR,(ind+1))]
pippo=MM[selC][]
pippo=pippo[,c(selR,(ind+1))]
selR
debugSource('C:/Users/AntonioYOGA/Desktop/Desk DELL/HISTO_R_PACK/HistDAWass/R/coclu_try.R')
debugSource('C:/Users/AntonioYOGA/Desktop/Desk DELL/HISTO_R_PACK/HistDAWass/R/coclu_try.R')
Rcpp::sourceCpp('src/Utility_fun.cpp')
Rcpp::sourceCpp('src/Utility_fun.cpp')
Rcpp::sourceCpp('src/Utility_fun.cpp')
Rcpp::sourceCpp('src/Utility_fun.cpp')
Rcpp::sourceCpp('src/Utility_fun.cpp')
library(HistDAWass)
res<-WH_adaptive.kmeans(BLOOD,2)
res$weights
colnames(res$weights)<-paste0("Cl.",c(1:k))
colnames(res$weights)<-paste0("Cl.",c(1:2))
res$weights
get.MatH.varnames(BLOOD)
paste0(get.MatH.varnames(BLOOD),c("center", "variability"))
paste0(get.MatH.varnames(BLOOD),collapse = c("center", "variability"))
paste(get.MatH.varnames(BLOOD), c("center", "variability"),sep="_")
paste(rep(get.MatH.varnames(BLOOD),each=2), c("center", "variability"),sep="_")
paste0(rep(get.MatH.varnames(BLOOD),each=2), c("(Cen.)", "(Var.)"),sep="_")
paste0(rep(get.MatH.varnames(BLOOD),each=2), c("(Cen.)", "(Var.)"))
source('C:/Users/AntonioYOGA/Desktop/Desk DELL/HISTO_R_PACK/HistDAWass/R/unsuperv_classification.R')
res<-WH_adaptive.kmeans(BLOOD,2)
library(HistDAWass)
res<-WH_adaptive.kmeans(BLOOD,2)
library(HistDAWass)
res<-WH_adaptive.kmeans(BLOOD,2)
res$weights
res<-WH_adaptive.kmeans(BLOOD,2,4)
res$weights
res<-WH_adaptive.kmeans(BLOOD,2,6)
res$weights
res<-WH_adaptive.kmeans(BLOOD,2,5)
res$weights
res<-WH_adaptive.kmeans(BLOOD,2,4)
res$weights
res<-WH_adaptive_fcmeans(BLOOD,2,schema = 4)
res$solution$var.weights
res<-WH_adaptive.kmeans(BLOOD,2,4)
library(HistDAWass)
res<-WH_adaptive_fcmeans(BLOOD,2,schema = 4)
res$solution$var.weights
head(res$solution$membership)
get.MatH.rownames(BLOOD)
res$solution$IDX
res$solution$cardinality
res$solution$proto
res$solution$Crit
res$rep
res$quality
res$weight.sys
library(HistDAWass)
res<-WH_adaptive_fcmeans(BLOOD,2,schema = 4)
head(res$solution$membership)
round(head(res$solution$membership),4)
results <- WH_2d_Adaptive_Kohonen_maps(x = BLOOD, net = list(xdim = 2, ydim = 3, topo = c("rectangular")), repetitions = 2, simplify = TRUE, qua = 10, standardize = TRUE)
results$solution$weights.comp
library(HistDAWass)
install.packages("dlstats")
cran_stats("HistDAWass")
library(dlstats)
cran_stats("HistDAWass")
source('C:/Users/AntonioYOGA/Desktop/Desk DELL/HISTO_R_PACK/HistDAWass/R/unsuperv_classification.R')
styler::style_file("unsuperv_classification.R")
styler::style_file("C:/Users/AntonioYOGA/Desktop/Desk DELL/HISTO_R_PACK/HistDAWass/R/unsuperv_classification.R")
source('C:/Users/AntonioYOGA/Desktop/Desk DELL/HISTO_R_PACK/HistDAWass/R/unsuperv_classification.R')
library(HistDAWass)
results <- WH_coclustering(x = China_Seas, kR = 3, kC = 4,rep = 5, simplify = TRUE, qua = 10, standardize = TRUE, verbose = TRUE)
library(HistDAWass)
results <- WH_coclustering(x = China_Seas, kR = 3, kC = 4,rep = 5, simplify = TRUE, qua = 10, standardize = TRUE, verbose = TRUE)
library(HistDAWass)
results <- WH_coclustering(x = China_Seas, kR = 3, kC = 4,rep = 5, simplify = TRUE, qua = 10, standardize = TRUE, verbose = TRUE)
library(HistDAWass)
results <- WH_coclustering(x = China_Seas, kR = 3, kC = 4,rep = 5, simplify = TRUE, qua = 10, standardize = TRUE, verbose = TRUE)
MM[[selC]]
results <- WH_coclustering(x = China_Seas, kR = 3, kC = 4,rep = 5, simplify = TRUE, qua = 10, standardize = TRUE, verbose = TRUE)
library(HistDAWass)
results <- WH_coclustering(x = China_Seas, kR = 3, kC = 4,rep = 5, simplify = TRUE, qua = 10, standardize = TRUE, verbose = TRUE)
styler::style_file("C:/Users/AntonioYOGA/Desktop/Desk DELL/HISTO_R_PACK/HistDAWass/R/unsuperv_classification.R")
library(HistDAWass)
results <- WH_coclustering(x = China_Seas, kR = 3, kC = 4,rep = 5, simplify = TRUE, qua = 10, standardize = TRUE, verbose = TRUE)
debugSource('C:/Users/AntonioYOGA/Desktop/Desk DELL/HISTO_R_PACK/PROTOTIPI_in_sviluppo/Coclustering_new_check.R')
source('C:/Users/AntonioYOGA/Desktop/Desk DELL/HISTO_R_PACK/HistDAWass/R/Utility.R')
Rcpp::sourceCpp('C:/Users/AntonioYOGA/Desktop/Desk DELL/HISTO_R_PACK/HistDAWass/src/Utility_fun.cpp')
debugSource('C:/Users/AntonioYOGA/Desktop/Desk DELL/HISTO_R_PACK/PROTOTIPI_in_sviluppo/Coclustering_new_check.R')
results <- WH_coclustering2(x = China_Seas, kR = 3, kC = 4,rep = 5, simplify = TRUE, qua = 10, standardize = TRUE, verbose = TRUE)
debugSource('C:/Users/AntonioYOGA/Desktop/Desk DELL/HISTO_R_PACK/PROTOTIPI_in_sviluppo/Coclustering_new_check.R')
results <- WH_coclustering2(x = China_Seas, kR = 3, kC = 4,rep = 5, simplify = TRUE, qua = 10, standardize = TRUE, verbose = TRUE)
debugSource('C:/Users/AntonioYOGA/Desktop/Desk DELL/HISTO_R_PACK/PROTOTIPI_in_sviluppo/Coclustering_new_check.R')
results <- WH_coclustering2(x = China_Seas, kR = 3, kC = 4,rep = 5, simplify = TRUE, qua = 10, standardize = TRUE, verbose = TRUE)
debugSource('C:/Users/AntonioYOGA/Desktop/Desk DELL/HISTO_R_PACK/PROTOTIPI_in_sviluppo/Coclustering_new_check.R')
results <- WH_coclustering2(x = China_Seas, kR = 3, kC = 4,rep = 5, simplify = TRUE, qua = 10, standardize = TRUE, verbose = TRUE)
selC
debugSource('C:/Users/AntonioYOGA/Desktop/Desk DELL/HISTO_R_PACK/PROTOTIPI_in_sviluppo/Coclustering_new_check.R')
results <- WH_coclustering2(x = China_Seas, kR = 3, kC = 4,rep = 5, simplify = TRUE, qua = 10, standardize = TRUE, verbose = TRUE)
debugSource('C:/Users/AntonioYOGA/Desktop/Desk DELL/HISTO_R_PACK/PROTOTIPI_in_sviluppo/Coclustering_new_check.R')
results <- WH_coclustering2(x = China_Seas, kR = 3, kC = 4,rep = 5, simplify = TRUE, qua = 10, standardize = TRUE, verbose = TRUE)
str(tmp)
tmp
source('C:/Users/AntonioYOGA/Desktop/Desk DELL/HISTO_R_PACK/PROTOTIPI_in_sviluppo/Coclustering_new_check.R')
results <- WH_coclustering2(x = China_Seas, kR = 3, kC = 4,rep = 5, simplify = TRUE, qua = 10, standardize = TRUE, verbose = TRUE)
results$solution$IDX
results$solution$centers
plot(results$solution$centers)
results$solution$cardinality
styler::style_file("C:/Users/AntonioYOGA/Desktop/Desk DELL/HISTO_R_PACK/HistDAWass/R/unsuperv_classification.R")
library(HistDAWass)
results <- WH_coclustering2(x = China_Seas, kR = 3, kC = 4,rep = 5, simplify = TRUE, qua = 10, standardize = TRUE, verbose = TRUE)
results <- WH_coclustering(x = China_Seas, kR = 3, kC = 4,rep = 5, simplify = TRUE, qua = 10, standardize = TRUE, verbose = TRUE)
results <- WH_coclustering(x = China_Seas, kR = 3, kC = 4,rep = 5, simplify = TRUE, qua = 10, standardize = TRUE, verbose = FALSE)
library(HistDAWass)
install.packages("HistDAWass")
library(HistDAWass)
plot(subsetHTS(RetHTS, from = 1, to = 10))
install.packages("ggridges")
install.packages("C:/Users/AntonioYOGA/Desktop/ggridges_0.5.4.tar.gz", repos = NULL, type = "source")
library(HistDAWass)
plot(subsetHTS(RetHTS, from = 1, to = 10))
traceback()
install.packages("C:/Users/AntonioYOGA/Desktop/roxygen2_7.1.1.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/AntonioYOGA/Desktop/roxygen2_7.1.1.tar.gz", repos = NULL, type = "source",dependencies = T)
install.packages("brew")
install.packages("commonmark")
install.packages("xml2")
install.packages("C:/Users/AntonioYOGA/Desktop/roxygen2_7.1.1.tar.gz", repos = NULL, type = "source",dependencies = T)
install.packages("roxygen2")
install.packages("xfun")
install.packages("pkgbuild")
